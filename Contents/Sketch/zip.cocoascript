@import 'export.cocoascript';

//作为zip包导出
var ExportAsZip = function(){};
ExportAsZip.prototype = {
  setup: function(){
    //导出选项
    var expConfig = this.getExportConfig();
    //保存路径
    var exportPath = null;
    //画板类型
    var artboardType = null;
    //marketch
    var marketch = null;
    //打包结果
    var zipResult = null;

    //点了确定按钮
    if(expConfig.button == 1000){
      switch (expConfig.artboard){
        default:
        case 0:
          artboardType = 'selected';
          break;
        case 1:
          artboardType = 'page';
          break;
        case 2:
          artboardType = 'all';
          break;
      }

      //获取保存路径
      exportPath = this.getSavePath();

      if(exportPath){
        coscript.shouldKeepAround = true;
        // 显示提示状态
        doc.showMessage(I18N.EXPORTING);

        // 延迟1s执行，避免阻塞ui
        [coscript scheduleWithInterval:1 jsFunction:function(cinterval) {
          marketch = new Marketch().run({
            layer: expConfig.layer,
            artboard: artboardType,
            saveSource: expConfig.saveSource,
            scale2x: expConfig.scale2x
          });

          zipResult = util.zipFile(marketch.tmpPath.basePath, exportPath);

          if(zipResult){
            // Build the request body
            var boundary = "SportuondoFormBoundary";
            var body = NSMutableData.data();

            // Body part for the attachament. This is an image.
            var imagePath = ctx.scriptPath.stringByDeletingLastPathComponent() + '/image.jpg';
            var imageData = NSData.dataWithContentsOfURL(imagePath);
            if (imageData) {
              body.appendData(NSString.stringWithFormat("--%@\r\n", boundary).dataUsingEncoding(NSUTF8StringEncoding));
              body.appendData(NSString.stringWithFormat("Content-Disposition: form-data; name=\"%@\"; filename=\"image.jpg\"\r\n", "uploaded_file").dataUsingEncoding(NSUTF8StringEncoding));
              body.appendData("Content-Type: image/jpeg\r\n\r\n");
              body.appendData(imageData);
              body.appendData(NSString.stringWithFormat("\r\n"));
            }
            body.appendData(NSString.stringWithFormat("--%@--\r\n", boundary).dataUsingEncoding(NSUTF8StringEncoding));

            // Setup the session
            var sessionConfiguration = NSURLSessionConfiguration.defaultSessionConfiguration();
            sessionConfiguration.setHTTPAdditionalHeaders({
              "api-key": "55e76dc4bbae25b066cb",
              "Accept": "application/json",
              "Content-Type": NSString.stringWithFormat("multipart/form-data; boundary=%", boundary)
            });

            // Create the session
            // We can use the delegate to track upload progress
            var session = NSURLSession.sessionWithConfiguration_delegate_delegateQueue(sessionConfiguration, self, null);

            // Data uploading task. We could use NSURLSessionUploadTask instead of NSURLSessionDataTask if we needed to support uploads in the background
            var url = NSURL.URLWithString("http://10.7.50.13:8000/exegesis/sketch_upload/");
            var request = NSMutableURLRequest.requestWithURL(url);
            request.setHTTPMethod("POST");
            request.setHTTPBody(body);
            var uploadTask = session.dataTaskWithRequest_completionHandler(request, nil);

            //task执行成功
            doc.showMessage(I18N.EXPORTSUCCESS);
            //var zipURL = [NSURL fileURLWithPath: exportPath];
            //var fileURLs = [NSArray arrayWithArray:[zipURL]];
            //[[NSWorkspace sharedWorkspace] activateFileViewerSelectingURLs:fileURLs];
          }else{
            doc.showMessage(I18N.EXPORTFAIL);
          }
          coscript.shouldKeepAround = false;
        }];
      }
    }
  },

  //获取导出选项
  getExportConfig: function(){
    var altWin = COSAlertWindow.new();
    var items = [I18N.SELECTEDARTBOARD, I18N.ARTBOARDONPAGE, I18N.ALLARTBOARD];
    var comboBox = NSComboBox.alloc().initWithFrame(NSMakeRect(0,0,200,25));
    var scaleBox = NSButton.alloc().initWithFrame(NSMakeRect(0,0,250,14));
    var exportBox = NSButton.alloc().initWithFrame(NSMakeRect(0,0,250,14));
    var sourceBox = NSButton.alloc().initWithFrame(NSMakeRect(0,0,250,14));

    altWin.setMessageText('Marketch');
    altWin.setInformativeText(I18N.SELECTEXPORTARTBOARD);
    altWin.addButtonWithTitle(I18N.CONFIRM);
    altWin.addButtonWithTitle(I18N.CANCEl);

    comboBox.addItemsWithObjectValues(items);
    comboBox.selectItemAtIndex(2);

    scaleBox.setTitle(I18N.SCALEARTBOARD);
    scaleBox.setButtonType(NSSwitchButton);
    scaleBox.setState(true);

    exportBox.setTitle(I18N.EXPORTEVERYLAYER);
    exportBox.setButtonType(NSSwitchButton);
    exportBox.setState(true);

    sourceBox.setTitle(I18N.SAVESKETCHSOURCE);
    sourceBox.setButtonType(NSSwitchButton);
    sourceBox.setState(false);

    altWin.addAccessoryView(comboBox);
    altWin.addAccessoryView(scaleBox);
    altWin.addAccessoryView(exportBox);
    altWin.addAccessoryView(sourceBox);

    return {
      //用户点击按钮 确认返回1000，取消返回1001
      button: altWin.runModal(),
      //需要导出的画板返回值为索引
      artboard: comboBox.indexOfSelectedItem(),
      //画板导出2x图
      scale2x: scaleBox.state(),
      //是否导出每个图层的图片
      layer: exportBox.state(),
      //是否在导出完成后打开 Finder
      saveSource: sourceBox.state()
    }
  },

  //获取zip包保存路径
  getSavePath: function(){
    var savePanel = NSSavePanel.savePanel();
    var docName = util.toJSString(doc.displayName());

    savePanel.setTitle(I18N.EXPORT);
    savePanel.setNameFieldLabel(I18N.EXPORTTO);
    savePanel.setShowsTagField(false);
    savePanel.setAllowedFileTypes(NSArray.arrayWithObject(@'zip'));
    savePanel.setAllowsOtherFileTypes(false);
    savePanel.setCanCreateDirectories(true);

    if(!doc.fileURL()){
      docName = 'Untitled';
    }else{
      docName = docName.replace('.sketch', '');
    }

    //设置默认导出zip包的文件名为sketch源文件名
    savePanel.setNameFieldStringValue([NSString stringWithFormat:@'%@.zip', docName]);

    if (savePanel.runModal() != NSOKButton){
      return false;
    }else{
      return savePanel.URL().path();
    }
  }
}

var onRun = function(context){
  ctx = context;
  doc = context.document;
  new ExportAsZip().setup();
}
